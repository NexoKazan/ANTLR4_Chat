//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\0MyDesktop\ANTLR_HelloWorld\ANTLR_HelloWorld\Speak.g4 by ANTLR 4.6.6-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ANTLR_HelloWorld {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class SpeakParser : Parser {
	public const int
		SAYS=1, WORD=2, TEXT=3, WHITESPACE=4, NEWLINE=5;
	public const int
		RULE_chat = 0, RULE_line = 1, RULE_name = 2, RULE_opinion = 3;
	public static readonly string[] ruleNames = {
		"chat", "line", "name", "opinion"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "SAYS", "WORD", "TEXT", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Speak.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SpeakParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ChatContext : ParserRuleContext {
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ITerminalNode Eof() { return GetToken(SpeakParser.Eof, 0); }
		public ChatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpeakListener typedListener = listener as ISpeakListener;
			if (typedListener != null) typedListener.EnterChat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpeakListener typedListener = listener as ISpeakListener;
			if (typedListener != null) typedListener.ExitChat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpeakVisitor<TResult> typedVisitor = visitor as ISpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChatContext chat() {
		ChatContext _localctx = new ChatContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_chat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8; line();
			State = 9; line();
			State = 10; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode SAYS() { return GetToken(SpeakParser.SAYS, 0); }
		public OpinionContext opinion() {
			return GetRuleContext<OpinionContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(SpeakParser.NEWLINE, 0); }
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpeakListener typedListener = listener as ISpeakListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpeakListener typedListener = listener as ISpeakListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpeakVisitor<TResult> typedVisitor = visitor as ISpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12; name();
			State = 13; Match(SAYS);
			State = 14; opinion();
			State = 15; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(SpeakParser.WORD, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpeakListener typedListener = listener as ISpeakListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpeakListener typedListener = listener as ISpeakListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpeakVisitor<TResult> typedVisitor = visitor as ISpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpinionContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(SpeakParser.TEXT, 0); }
		public OpinionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opinion; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpeakListener typedListener = listener as ISpeakListener;
			if (typedListener != null) typedListener.EnterOpinion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpeakListener typedListener = listener as ISpeakListener;
			if (typedListener != null) typedListener.ExitOpinion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpeakVisitor<TResult> typedVisitor = visitor as ISpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpinion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpinionContext opinion() {
		OpinionContext _localctx = new OpinionContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_opinion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19; Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\a\x18\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x2\x2\x2\x6\x2\x2\x4"+
		"\x2\x6\x2\b\x2\x2\x2\x13\x2\n\x3\x2\x2\x2\x4\xE\x3\x2\x2\x2\x6\x13\x3"+
		"\x2\x2\x2\b\x15\x3\x2\x2\x2\n\v\x5\x4\x3\x2\v\f\x5\x4\x3\x2\f\r\a\x2\x2"+
		"\x3\r\x3\x3\x2\x2\x2\xE\xF\x5\x6\x4\x2\xF\x10\a\x3\x2\x2\x10\x11\x5\b"+
		"\x5\x2\x11\x12\a\a\x2\x2\x12\x5\x3\x2\x2\x2\x13\x14\a\x4\x2\x2\x14\a\x3"+
		"\x2\x2\x2\x15\x16\a\x5\x2\x2\x16\t\x3\x2\x2\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ANTLR_HelloWorld
